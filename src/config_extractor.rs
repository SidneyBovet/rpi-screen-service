// This must be the proto package name
pub mod api_config {
    // Generated by [`prost-build`]
    include!(concat!(env!("OUT_DIR"), "/api_config.rs"));
    // Generated by [`pbjson-build`]
    include!(concat!(env!("OUT_DIR"), "/api_config.serde.rs"));
}

pub mod config_extractor {
    use crate::config_extractor::api_config::ApiConfig;
    use clap::ArgMatches;
    use std::{fs::File, io::BufReader, path::PathBuf};

    pub fn extract_config(matches: &ArgMatches) -> Result<ApiConfig, Box<dyn std::error::Error>> {
        // Return early if we don't have a path
        let path: &PathBuf = matches.get_one("path").ok_or("Missing path argument")?;
        // Open the file from the given path
        let file = File::open(path)?;
        // Open the file in a buffered reader
        let reader = BufReader::new(file);
        // This needs to known to use the ApiConfig deserializer, hence the explicit type
        let api_config: ApiConfig = serde_json::from_reader(reader)?;

        Ok(api_config)
    }
}
